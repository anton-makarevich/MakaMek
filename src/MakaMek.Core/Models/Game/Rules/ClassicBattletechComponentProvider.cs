using Sanet.MakaMek.Core.Data.Units.Components;
using Sanet.MakaMek.Core.Models.Units.Components;
using Sanet.MakaMek.Core.Models.Units.Components.Engines;
using Sanet.MakaMek.Core.Models.Units.Components.Internal;
using Sanet.MakaMek.Core.Models.Units.Components.Internal.Actuators;
using Sanet.MakaMek.Core.Models.Units.Components.Weapons;
using Sanet.MakaMek.Core.Models.Units.Components.Weapons.Ballistic;
using Sanet.MakaMek.Core.Models.Units.Components.Weapons.Energy;
using Sanet.MakaMek.Core.Models.Units.Components.Weapons.Melee;
using Sanet.MakaMek.Core.Models.Units.Components.Weapons.Missile;

namespace Sanet.MakaMek.Core.Models.Game.Rules;

/// <summary>
/// Registry containing all component definitions and factory methods
/// Component mappings are auto-generated by ComponentProviderGenerator
/// </summary>
public partial class ClassicBattletechComponentProvider : IComponentProvider
{
    private readonly Dictionary<MakaMekComponent, ComponentDefinition> _definitions;
    private readonly Dictionary<MakaMekComponent, Func<ComponentData?, Component?>> _factories;

    public ClassicBattletechComponentProvider()
    {
        _definitions = new Dictionary<MakaMekComponent, ComponentDefinition>();
        _factories = new Dictionary<MakaMekComponent, Func<ComponentData?, Component?>>();

        // Populated by source-generated partial methods
        InitializeGeneratedDefinitions(_definitions);
        InitializeGeneratedFactories(_factories);
    }

    /// <summary>
    /// Partial method implemented by source generator to populate definitions
    /// </summary>
    partial void InitializeGeneratedDefinitions(
        Dictionary<MakaMekComponent, ComponentDefinition> definitions);

    /// <summary>
    /// Partial method implemented by source generator to populate factories
    /// </summary>
    partial void InitializeGeneratedFactories(
        Dictionary<MakaMekComponent, Func<ComponentData?, Component?>> factories);

    public ComponentDefinition? GetDefinition(MakaMekComponent componentType, ComponentSpecificData? specificData = null)
    {
        // Special case: Engine has dynamic definition based on state
        if (componentType == MakaMekComponent.Engine && specificData is EngineStateData engineState)
        {
            return Engine.CreateEngineDefinition(engineState);
        }

        // All other components use generated mappings
        return _definitions.GetValueOrDefault(componentType);
    }

    public Component? CreateComponent(MakaMekComponent componentType, ComponentData? componentData = null)
    {
        return _factories.TryGetValue(componentType, out var factory) ? factory(componentData) : null;
    }
}